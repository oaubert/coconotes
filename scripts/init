#! /bin/sh

DIR=$(dirname $0)/..
cd $DIR
CONFIG=$DIR/scripts/initconfig.json
if [ ! -r $CONFIG ]
then
    echo "Missing configuration file $CONFIG"
    exit 1
fi

if [ "$1" = "confirm" ]
then
    rm db.sqlite3
    ./manage.py migrate
    # Update Site info
    echo "from django.contrib.sites.models import Site; Site.objects.filter(pk=1).update(name='COCoNotes', domain='coconotes.comin-ocw.org')" | python manage.py shell --plain

    # superuser.json is a simple json file with username, mail and password properties, using the following structure:
    # { "superusers": [ { "username": ..., "mail": ..., "password": ... }, { ... } ],
    #   "users": [ { "username": ..., "mail": ..., "password": ... }, { ... } ],
    #   "groups": [ { "name": ..., "members": [ "...", "..." ] } ]
    # }
    (echo "from django.contrib.auth.models import User, Group"
     jq -r ".superusers | map(\"User.objects.create_superuser('\(.username)', '\(.mail)', '\(.password)')\") | join(\"\n\")" "$CONFIG"
     jq -r ".users | map(\"User.objects.create_user('\(.username)', '\(.mail)', '\(.password)')\") | join(\"\n\")" "$CONFIG"
     jq -r ".groups | map(\"print 'Creating %s' % \(.name)\n(g, cr) = Group.objects.get_or_create(name='\(.name)')\n\" + (.members | map(\"g.user_set.add(User.objects.get_or_create(username='\(.)')[0])\") | join(\"\n\"))) | join(\"\n\")" "$CONFIG"
    ) | python manage.py shell --plain
    ./scripts/populate
else
    echo "Run with confirm as first parameter"
fi


exit 0


